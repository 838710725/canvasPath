from flask import Flask, render_template, request, redirect, url_forimport mysql.connectorapp = Flask(__name__)# configdb = mysql.connector.connect(    host="localhost",    user="root",    passwd="01swrsdoo",    db="canvas_path")cur = db.cursor()email = 'aan1394@lionstate.edu'password = 'hj0n3pp5'#login page@app.route('/', methods=['POST', 'GET'])def login_info():    error = None    if request.method == 'POST':        loc_email = request.form['username']        loc_pass = request.form['password']        global email        global password        email = loc_email        password = loc_pass        cur.execute("SELECT * FROM STUDENT WHERE email = %s AND password = %s;", (email,password))        result_student = cur.fetchall()        cur.execute("SELECT * FROM professor WHERE email = %s AND password = %s;", (email, password))        result_professor = cur.fetchall()        print(result_student)        print(result_professor)        if not result_student and email != 'admin@lionstate.edu' and result_professor:            print('in professor')            return redirect(url_for('professor'))        elif not result_professor and email != 'admin@lionstate.edu' and result_student:            print("in student")            return redirect(url_for('CheckInfo'))        elif email == 'admin@lionstate.edu':            print("in admin")            return redirect(url_for('admin'))        else:            print('log in fail')            return render_template('index.html', error = 'wrong password')    return render_template('index.html', error = error)#student page@app.route('/CheckInfo',methods=['POST','GET'])def CheckInfo():    cur.execute("SELECT DISTINCT C.course_id,C.course_name, C.course_description,C.email,C.office_address, C.grade "                "FROM checkInfo C "                "WHERE C.student_email =%s ",(email,)                )    courseInfo = cur.fetchall()    #print(courseInfo)    for row in courseInfo:        courseId = row[0]        courseName = row[1]        courseDes = row[2]        profEmail = row[3]        profOffice = row[4]        courseGrade = row[5]    cur.execute("SELECT MAX(grade), min(grade), avg(grade) FROM homework_grades WHERE course_id =%s;",(courseId,))    courseAvg = cur.fetchall()    for row in courseAvg:        high_grade = row[0]        low_grade = row[1]        avg_grade = row[2]   # print(courseAvg)#find the user information    cur.execute('SELECT email, password, name, age, gender, major, street, zipcode '                'FROM student s '                'WHERE s.email = %s',(email,)                )    studentInfo = cur.fetchall()    for row in studentInfo:        st_email = row[0]        st_pwd = row[1]        st_name = row[2]        st_age = row[3]        st_gender = row[4]        st_major = row[5]        st_addr = row[6]        st_zip = row[7]    if request.method == 'POST':        newpwd = request.form['newpwd']        oldpwd = request.form['oldpwd']        if "change" in request.form:            cur.execute('Update student SET password = %s Where password = %s', (newpwd,oldpwd))            db.commit()            print('change password success')  #  print(studentInfo)  #  print(st_email)    return render_template('student.html', st_email=st_email, st_pwd=st_pwd, st_name = st_name, st_age = st_age, st_gender = st_gender, st_major = st_major,                           st_addr=st_addr,st_zip = st_zip, courseId = courseId,courseName = courseName,courseDes = courseDes,profEmail = profEmail,                           profOffice = profOffice, courseGrade = courseGrade,high_grade = high_grade, low_grade=low_grade,avg_grade=avg_grade)""" admin assign information"""@app.route('/admin',methods=['POST','GET'])def admin():    if request.method =='POST':        course = request.form['course']        section = request.form['section']        professor = request.form['professor']        student = request.form['student']        if "add" in request.form:            cur.execute('INSERT INTO course (course_id) VALUES (%s)',(course,))            db.commit()            print('insert successful')            return render_template('admin.html',message = "insert successful")        elif "remove" in request.form:            cur.execute('DELETE FROM course WHERE course_id = %s',(course,))            db.commit()            print('delete successful')            return render_template('admin.html')        elif "enroll" in request.form:            cur.execute('INSERT INTO enrolls (student_email, course_id, section_no) VALUES (%s,%s,%s)',(student,course,section))            db.commit()            print('enroll successful')            return render_template('admin.html',message = 'enroll successful')        elif "assign" in request.form:            cur.execute('INSERT INTO sections (prof_team_id, course_id, sec_no) VALUES (%s,%s,%s)',                        (professor, course, section))            db.commit()            print('assign successful')            return render_template('admin.html', message='assign successful')    return render_template('admin.html')@app.route('/professor',methods=['POST','GET'])def professor():    if request.method == 'POST':        course = request.form['course']        section = request.form['section']        assignment = request.form['hw_detail']        hw_no = request.form['hw_no']        loc_email = request.form['email']        grade = request.form['grade']        cur.execute("SELECT * FROM teaching WHERE prof_email = %s AND course_id = %s;", (email, course))        teaching = cur.fetchall()        if "create" in request.form:            if teaching:                cur.execute('INSERT INTO homework (course_id,sec_no,hw_no,hw_detail) VALUES (%s,%s,%s,%s)',                         (course,section,hw_no,assignment))                db.commit()                print('create successful')                return render_template('professor.html', message="create successful")            else:                print('not your class')                return render_template('professor.html', message="not your class")        elif "grade" in request.form:            if teaching:                cur.execute('INSERT INTO homework_grades (student_email,course_id, sec_no,hw_no,grade) VALUES (%s,%s,%s,%s,%s)',                            (loc_email, course, section, hw_no, grade))                db.commit()                print("grade successful")                return render_template('professor.html', message="grade successful")    return render_template('professor.html')app.run()